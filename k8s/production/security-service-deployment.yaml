apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-service
  namespace: zoptal-production
  labels:
    app: security-service
    tier: security
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: security-service
  template:
    metadata:
      labels:
        app: security-service
        tier: security
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3007"
        prometheus.io/path: "/api/security/metrics"
    spec:
      serviceAccountName: security-service-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: security-service
        image: zoptal/security-service:v1.0.0
        ports:
        - containerPort: 3007
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3007"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: connection-string
        - name: CLOUDFLARE_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: cloudflare-secret
              key: api-token
        - name: CLOUDFLARE_ZONE_ID
          valueFrom:
            secretKeyRef:
              name: cloudflare-secret
              key: zone-id
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: security-service-secret
              key: jwt-secret
        - name: ADMIN_API_KEY
          valueFrom:
            secretKeyRef:
              name: security-service-secret
              key: admin-api-key
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: notification-secrets
              key: slack-webhook-url
        - name: BLOCKED_COUNTRIES
          valueFrom:
            configMapKeyRef:
              name: security-service-config
              key: blocked-countries
        - name: ALLOWED_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: security-service-config
              key: allowed-origins
        - name: GLOBAL_RATE_LIMIT
          valueFrom:
            configMapKeyRef:
              name: security-service-config
              key: global-rate-limit
        - name: IP_RATE_LIMIT
          valueFrom:
            configMapKeyRef:
              name: security-service-config
              key: ip-rate-limit
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: security-service-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - security-service
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "security-node"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: security-service
  namespace: zoptal-production
  labels:
    app: security-service
    tier: security
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3007"
spec:
  selector:
    app: security-service
  ports:
  - name: http
    port: 3007
    targetPort: http
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-service-sa
  namespace: zoptal-production
  labels:
    app: security-service

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: zoptal-production
  name: security-service-reader
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: security-service-binding
  namespace: zoptal-production
subjects:
- kind: ServiceAccount
  name: security-service-sa
  namespace: zoptal-production
roleRef:
  kind: Role
  name: security-service-reader
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-service-config
  namespace: zoptal-production
  labels:
    app: security-service
data:
  blocked-countries: "CN,RU,KP,IR"
  allowed-origins: "https://app.zoptal.com,https://admin.zoptal.com"
  global-rate-limit: "1000"
  ip-rate-limit: "100"
  user-rate-limit: "200"
  endpoint-rate-limit: "50"
  warning-block-duration: "300"
  temporary-block-duration: "1800"
  extended-block-duration: "3600"
  permanent-block-duration: "86400"
  enable-monitoring: "true"
  metrics-retention-hours: "24"
  log-level: "info"
  enable-geo-blocking: "true"
  ddos-protection: "true"

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: security-service-hpa
  namespace: zoptal-production
  labels:
    app: security-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: security-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: security-service-pdb
  namespace: zoptal-production
  labels:
    app: security-service
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: security-service

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: security-service-netpol
  namespace: zoptal-production
  labels:
    app: security-service
spec:
  podSelector:
    matchLabels:
      app: security-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: zoptal-production
    - podSelector:
        matchLabels:
          tier: gateway
    ports:
    - protocol: TCP
      port: 3007
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: zoptal-production
    - podSelector:
        matchLabels:
          app: redis
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: UDP
      port: 53