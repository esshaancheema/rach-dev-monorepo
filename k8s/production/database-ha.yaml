# High Availability Database Configuration
# Implements PostgreSQL streaming replication and Redis Sentinel

---
# PostgreSQL Primary Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-primary-config
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: primary
data:
  postgresql.conf: |
    # Basic settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 4MB
    maintenance_work_mem = 64MB
    
    # WAL settings for replication
    wal_level = replica
    max_wal_senders = 10
    max_replication_slots = 10
    wal_keep_size = 1GB
    
    # Archive settings
    archive_mode = on
    archive_command = 'test ! -f /archive/%f && cp %p /archive/%f'
    archive_timeout = 300
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = '/var/log/postgresql'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_statement = 'all'
    
    # Performance tuning
    random_page_cost = 1.1
    effective_io_concurrency = 200
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    
    # Security
    ssl = on
    ssl_cert_file = '/var/lib/postgresql/server.crt'
    ssl_key_file = '/var/lib/postgresql/server.key'
    ssl_ca_file = '/var/lib/postgresql/ca.crt'

  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    
    # "local" is for Unix domain socket connections only
    local   all             all                                     trust
    
    # IPv4 local connections:
    host    all             all             127.0.0.1/32            md5
    
    # IPv6 local connections:
    host    all             all             ::1/128                 md5
    
    # Allow replication connections from localhost, by a user with the
    # replication privilege.
    local   replication     all                                     trust
    host    replication     all             127.0.0.1/32            md5
    host    replication     all             ::1/128                 md5
    
    # Allow connections from Kubernetes pods
    host    all             all             10.0.0.0/8              md5
    host    replication     postgres        10.0.0.0/8              md5
    
    # Allow connections from replica
    host    replication     postgres        postgres-replica/32     md5

---
# PostgreSQL Primary StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: primary
spec:
  serviceName: postgres-primary
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: primary
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: primary
        app.kubernetes.io/instance: primary
    spec:
      serviceAccountName: postgres
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "zoptal"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: POSTGRES_REPLICATION_USER
          value: "postgres"
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: replication-password
        - name: PGDATA
          value: "/var/lib/postgresql/data"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
        - name: postgres-archive
          mountPath: /archive
        - name: postgres-logs
          mountPath: /var/log/postgresql
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-primary-config
      - name: postgres-archive
        persistentVolumeClaim:
          claimName: postgres-archive-pvc
      - name: postgres-logs
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi

---
# PostgreSQL Primary Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: primary

---
# PostgreSQL Replica Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-replica-config
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: replica
data:
  postgresql.conf: |
    # Replica-specific settings
    hot_standby = on
    max_standby_streaming_delay = 30s
    wal_receiver_status_interval = 10s
    hot_standby_feedback = on
    
    # Include primary settings
    include '/etc/postgresql/postgresql.conf'

  recovery.conf: |
    standby_mode = 'on'
    primary_conninfo = 'host=postgres-primary port=5432 user=postgres'
    trigger_file = '/tmp/postgresql.trigger'
    restore_command = 'cp /archive/%f %p'
    archive_cleanup_command = 'pg_archivecleanup /archive %r'

---
# PostgreSQL Replica StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-replica
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: replica
spec:
  serviceName: postgres-replica
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: replica
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: replica
        app.kubernetes.io/instance: replica
    spec:
      serviceAccountName: postgres
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "zoptal"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: PGDATA
          value: "/var/lib/postgresql/data"
        - name: POSTGRES_MASTER_SERVICE
          value: "postgres-primary"
        command:
        - /bin/bash
        - -c
        - |
          # Initialize replica from primary
          if [ ! -f "$PGDATA/PG_VERSION" ]; then
            echo "Initializing replica from primary..."
            pg_basebackup -h $POSTGRES_MASTER_SERVICE -U postgres -D $PGDATA -P -W -R
          fi
          
          # Start PostgreSQL
          exec docker-entrypoint.sh postgres
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
        - name: postgres-archive
          mountPath: /archive
        - name: postgres-logs
          mountPath: /var/log/postgresql
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "pg_isready -U $POSTGRES_USER"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "pg_isready -U $POSTGRES_USER"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-replica-config
      - name: postgres-archive
        persistentVolumeClaim:
          claimName: postgres-archive-pvc
      - name: postgres-logs
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi

---
# PostgreSQL Replica Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: replica

---
# PostgreSQL Archive PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-archive-pvc
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: archive
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-storage
  resources:
    requests:
      storage: 50Gi

---
# PostgreSQL Load Balancer Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: loadbalancer
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: primary

---
# Redis Sentinel Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-sentinel-config
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: redis-sentinel
    app.kubernetes.io/component: config
data:
  sentinel.conf: |
    port 26379
    dir /tmp
    
    # Monitor the master
    sentinel monitor mymaster redis-master 6379 2
    sentinel auth-pass mymaster your-redis-password
    
    # Timeouts and thresholds
    sentinel down-after-milliseconds mymaster 5000
    sentinel parallel-syncs mymaster 1
    sentinel failover-timeout mymaster 10000
    
    # Notification scripts
    sentinel notification-script mymaster /usr/local/bin/notify.sh
    sentinel client-reconfig-script mymaster /usr/local/bin/reconfig.sh
    
    # Logging
    logfile /var/log/redis/sentinel.log
    loglevel notice

  notify.sh: |
    #!/bin/bash
    # Notification script for Redis Sentinel events
    EVENT_TYPE=$1
    INSTANCE_NAME=$2
    ADDRESS=$3
    
    echo "$(date): Redis Sentinel Event - $EVENT_TYPE for $INSTANCE_NAME at $ADDRESS" >> /var/log/redis/sentinel-events.log
    
    # Send webhook notification if configured
    if [ -n "$WEBHOOK_URL" ]; then
      curl -X POST "$WEBHOOK_URL" \
        -H "Content-Type: application/json" \
        -d "{\"text\":\"Redis Sentinel: $EVENT_TYPE for $INSTANCE_NAME at $ADDRESS\"}" || true
    fi

  reconfig.sh: |
    #!/bin/bash
    # Client reconfiguration script
    MASTER_NAME=$1
    ROLE=$2
    STATE=$3
    FROM_IP=$4
    FROM_PORT=$5
    TO_IP=$6
    TO_PORT=$7
    
    echo "$(date): Redis reconfiguration - $MASTER_NAME $ROLE $STATE from $FROM_IP:$FROM_PORT to $TO_IP:$TO_PORT" >> /var/log/redis/sentinel-reconfig.log

---
# Redis Master StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-master
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
spec:
  serviceName: redis-master
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: master
        app.kubernetes.io/instance: master
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - /etc/redis/redis.conf
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: password
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "125m"
          limits:
            memory: "512Mi"
            cpu: "250m"
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 10Gi

---
# Redis Replica StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-replica
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: replica
spec:
  serviceName: redis-replica
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: replica
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: replica
        app.kubernetes.io/instance: replica
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --replicaof
        - redis-master
        - "6379"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: password
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 5Gi

---
# Redis Sentinel StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-sentinel
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: redis-sentinel
    app.kubernetes.io/component: sentinel
spec:
  serviceName: redis-sentinel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-sentinel
      app.kubernetes.io/component: sentinel
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-sentinel
        app.kubernetes.io/component: sentinel
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: sentinel
        image: redis:7-alpine
        ports:
        - containerPort: 26379
          name: sentinel
        command:
        - redis-sentinel
        - /etc/redis-sentinel/sentinel.conf
        env:
        - name: WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: notification-config
              key: webhook-url
              optional: true
        volumeMounts:
        - name: sentinel-config
          mountPath: /etc/redis-sentinel
        - name: sentinel-logs
          mountPath: /var/log/redis
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: sentinel-config
        configMap:
          name: redis-sentinel-config
          defaultMode: 0755
      - name: sentinel-logs
        emptyDir: {}

---
# Redis Services
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master

---
apiVersion: v1
kind: Service
metadata:
  name: redis-replica
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: replica

---
apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: redis-sentinel
    app.kubernetes.io/component: sentinel
spec:
  type: ClusterIP
  ports:
  - port: 26379
    targetPort: 26379
    name: sentinel
  selector:
    app.kubernetes.io/name: redis-sentinel
    app.kubernetes.io/component: sentinel

---
# Database Health Check Job
apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-health-check
  namespace: zoptal-production
  labels:
    app.kubernetes.io/name: database-health-check
    app.kubernetes.io/component: monitoring
spec:
  schedule: "*/5 * * * *" # Every 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: health-check
            image: postgres:15-alpine
            command:
            - /bin/bash
            - -c
            - |
              set -e
              
              echo "Checking PostgreSQL primary..."
              pg_isready -h postgres-primary -p 5432 -U postgres
              
              echo "Checking PostgreSQL replica..."
              pg_isready -h postgres-replica -p 5432 -U postgres
              
              echo "Checking Redis master..."
              redis-cli -h redis-master -p 6379 ping
              
              echo "Checking Redis sentinel..."
              redis-cli -h redis-sentinel -p 26379 ping
              
              echo "All database health checks passed!"
            env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "128Mi"
                cpu: "100m"