# Istio Security Policies for Zoptal Platform

# Namespace-level mTLS policy
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: zoptal-production
spec:
  mtls:
    mode: STRICT

---
# Service-to-service communication policy
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: service-to-service
  namespace: zoptal-production
spec:
  rules:
  # Allow auth-service to communicate with all services
  - from:
    - source:
        principals: ["cluster.local/ns/zoptal-production/sa/auth-service"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]

  # Allow project-service to communicate with auth-service and file-service
  - from:
    - source:
        principals: ["cluster.local/ns/zoptal-production/sa/project-service"]
    to:
    - operation:
        methods: ["GET", "POST"]
    when:
    - key: destination.labels[app]
      values: ["auth-service", "file-service"]

  # Allow ai-service to communicate with auth-service
  - from:
    - source:
        principals: ["cluster.local/ns/zoptal-production/sa/ai-service"]
    to:
    - operation:
        methods: ["GET", "POST"]
    when:
    - key: destination.labels[app]
      values: ["auth-service"]

  # Allow notification-service to communicate with auth-service
  - from:
    - source:
        principals: ["cluster.local/ns/zoptal-production/sa/notification-service"]
    to:
    - operation:
        methods: ["GET", "POST"]
    when:
    - key: destination.labels[app]
      values: ["auth-service"]

  # Allow billing-service to communicate with auth-service and notification-service
  - from:
    - source:
        principals: ["cluster.local/ns/zoptal-production/sa/billing-service"]
    to:
    - operation:
        methods: ["GET", "POST"]
    when:
    - key: destination.labels[app]
      values: ["auth-service", "notification-service"]

---
# Admin endpoints protection
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: admin-endpoints
  namespace: zoptal-production
spec:
  selector:
    matchLabels:
      app: auth-service
  rules:
  - to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/admin/*"]
    when:
    - key: source.ip
      values: ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]
    - key: request.headers[x-admin-token]
      values: ["*"]

---
# Database access policy
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: database-access
  namespace: zoptal-production
spec:
  rules:
  - from:
    - source:
        principals: 
        - "cluster.local/ns/zoptal-production/sa/auth-service"
        - "cluster.local/ns/zoptal-production/sa/project-service"
        - "cluster.local/ns/zoptal-production/sa/billing-service"
    to:
    - operation: {}
    when:
    - key: destination.port
      values: ["5432", "27017", "6379"]

---
# External service access policy
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: external-services
  namespace: zoptal-production
spec:
  rules:
  # Allow AI service to access OpenAI and Anthropic
  - from:
    - source:
        principals: ["cluster.local/ns/zoptal-production/sa/ai-service"]
    to:
    - operation: {}
    when:
    - key: destination.ip
      values: ["0.0.0.0/0"]
    - key: request.headers[:authority]
      values: ["api.openai.com", "api.anthropic.com"]

  # Allow notification service to access email services
  - from:
    - source:
        principals: ["cluster.local/ns/zoptal-production/sa/notification-service"]
    to:
    - operation: {}
    when:
    - key: destination.port
      values: ["587", "465", "25"]

  # Allow billing service to access Stripe
  - from:
    - source:
        principals: ["cluster.local/ns/zoptal-production/sa/billing-service"]
    to:
    - operation: {}
    when:
    - key: request.headers[:authority]
      values: ["api.stripe.com"]

---
# JWT authentication policy
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: jwt-auth
  namespace: zoptal-production
spec:
  selector:
    matchLabels:
      app: auth-service
  jwtRules:
  - issuer: "https://auth.zoptal.com"
    jwksUri: "https://auth.zoptal.com/api/auth/jwks"
    audiences:
    - "zoptal-api"
    - "zoptal-web"
    forwardOriginalToken: true
    fromHeaders:
    - name: Authorization
      prefix: "Bearer "
    fromParams:
    - "access_token"

---
# JWT-based authorization
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: jwt-based-auth
  namespace: zoptal-production
spec:
  selector:
    matchLabels:
      app: auth-service
  rules:
  - from:
    - source: {}
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/auth/user/*", "/api/auth/profile/*"]
    when:
    - key: request.auth.claims[iss]
      values: ["https://auth.zoptal.com"]
    - key: request.auth.claims[aud]
      values: ["zoptal-api"]

---
# Rate limiting policy based on JWT claims
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: rate-limit-by-user
  namespace: zoptal-production
spec:
  rules:
  - from:
    - source: {}
    to:
    - operation:
        methods: ["POST"]
        paths: ["/api/*"]
    when:
    - key: request.auth.claims[sub]
      values: ["*"]
    - key: request.auth.claims[plan]
      values: ["free"]
  - from:
    - source: {}
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/*"]
    when:
    - key: request.auth.claims[sub]
      values: ["*"]
    - key: request.auth.claims[plan]
      values: ["pro", "enterprise"]

---
# Workload identity binding
apiVersion: security.istio.io/v1beta1
kind: WorkloadEntry
metadata:
  name: auth-service-identity
  namespace: zoptal-production
spec:
  address: auth-service.zoptal-production.svc.cluster.local
  ports:
    http: 3001
  labels:
    app: auth-service
    version: v1
  serviceAccount: auth-service

---
# Security scanning policy
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: security-scanning
  namespace: zoptal-production
spec:
  rules:
  - from:
    - source:
        namespaces: ["zoptal-monitoring"]
    to:
    - operation:
        methods: ["GET"]
        paths: ["/security/scan", "/vulnerability/check"]

---
# Compliance audit policy
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: compliance-audit
  namespace: zoptal-production
spec:
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/zoptal-production/sa/audit-service"]
    to:
    - operation:
        methods: ["GET"]
        paths: ["/api/audit/*", "/api/compliance/*"]

---
# Deny all default policy (fail-safe)
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: deny-all-default
  namespace: zoptal-production
spec:
  # Empty rules means deny all - this is a fail-safe policy
  # Other policies above provide explicit allows

---
# Allow ingress gateway
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: allow-ingress
  namespace: zoptal-production
spec:
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    to:
    - operation: {}

---
# Secure headers policy
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: security-headers
  namespace: zoptal-production
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.local_response
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.local_response.v3.LocalResponse
          body:
            inline_string: "Access Denied"
          body_format:
            json_format:
              error: "Unauthorized access"
              code: 403
          status_code: 403

---
# TLS configuration for external services
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: external-tls
  namespace: zoptal-production
spec:
  host: "*.googleapis.com"
  trafficPolicy:
    tls:
      mode: SIMPLE
      sni: "*.googleapis.com"
      minProtocolVersion: TLSV1_2
      maxProtocolVersion: TLSV1_3
      cipherSuites:
      - ECDHE-RSA-AES256-GCM-SHA384
      - ECDHE-RSA-AES128-GCM-SHA256

---
# Certificate management
apiVersion: v1
kind: Secret
metadata:
  name: zoptal-tls-secret
  namespace: istio-system
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t  # Base64 encoded certificate
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t  # Base64 encoded private key