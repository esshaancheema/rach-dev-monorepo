# Kiali Configuration for Service Mesh Observability

apiVersion: v1
kind: ConfigMap
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
    version: v1.73
data:
  config.yaml: |
    server:
      port: 20001
      web_root: /kiali
      cors_allow_all: false
      gzip_enabled: true
      static_content_root_directory: /opt/kiali/console

    external_services:
      prometheus:
        url: "http://prometheus.istio-system:9090"
        custom_headers:
          X-Scope-OrgID: "zoptal"
      grafana:
        enabled: true
        url: "http://grafana.istio-system:3000"
        in_cluster_url: "http://grafana.istio-system:3000"
        dashboards:
          - name: "Istio Service Dashboard"
            variables:
              namespace: "var-namespace"
              service: "var-service"
          - name: "Istio Workload Dashboard"
            variables:
              namespace: "var-namespace"
              workload: "var-workload"
      jaeger:
        enabled: true
        url: "http://jaeger.istio-system:16686"
        in_cluster_url: "http://jaeger.istio-system:16686"
        namespace_selector: true
        whitelist_istio_system: ["jaeger-query", "istio-ingressgateway"]
        use_grpc: false

    auth:
      strategy: "anonymous"

    deployment:
      accessible_namespaces: ["**"]
      additional_service_yaml: {}
      cluster_wide_access: true
      image_digest: ""
      image_name: "quay.io/kiali/kiali"
      image_pull_policy: "Always"
      image_pull_secrets: []
      image_version: "v1.73"
      ingress_enabled: false
      logger:
        log_format: "text"
        log_level: "info"
        time_field_format: "2006-01-02T15:04:05Z07:00"
        sampler_rate: "1"
      namespace: "istio-system"
      override_ingress_yaml: {}
      pod_annotations: {}
      pod_labels: {}
      priority_class_name: ""
      replicas: 1
      resources:
        requests:
          cpu: "10m"
          memory: "64Mi"
        limits:
          cpu: "500m"
          memory: "1Gi"
      secret_name: "kiali"
      security_context: {}
      service_annotations: {}
      service_type: "ClusterIP"
      tolerations: []
      version_label: "v1.73"
      view_only_mode: false

    istio_namespace: "istio-system"

    api:
      namespaces:
        exclude:
          - "istio-operator"
          - "kube-.*"
          - "openshift.*"
          - "ibm.*"
          - "kiali-operator"
        include: ["**"]
        label_selector_exclude: ""
        label_selector_include: ""

    installation_tag: "Kiali [v1.73]"
    istio_component_namespaces:
      grafana: "istio-system"
      istiod: "istio-system"
      prometheus: "istio-system"
      tracing: "istio-system"

    kiali_feature_flags:
      certificates_information_indicators:
        enabled: true
        secrets:
        - "cacerts"
        - "istio-ca-secret"
      clustering:
        enabled: true
      disabled_features: []
      validations:
        ignore: ["KIA1301"]

    kubernetes_config:
      burst: 200
      cache_duration: 300
      cache_istio_types:
      - "DestinationRule"
      - "Gateway"
      - "ServiceEntry"
      - "VirtualService"
      - "WorkloadEntry"
      - "WorkloadGroup"
      - "WasmPlugin"
      - "Telemetry"
      cache_namespaces:
      - "zoptal-production"
      - "zoptal-blue" 
      - "zoptal-green"
      - "zoptal-canary"
      - "istio-system"
      cache_token_namespace_duration: 10
      excluded_workloads:
      - "CronJob"
      - "DeploymentConfig"
      - "Job"
      - "ReplicationController"
      qps: 175

    login_token:
      expiration_seconds: 86400
      signing_key: ""

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
    version: v1.73
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kiali
      version: v1.73
  template:
    metadata:
      name: kiali
      labels:
        app: kiali
        version: v1.73
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        kiali.io/runtimes: go,kiali
    spec:
      serviceAccountName: kiali-service-account
      containers:
      - image: "quay.io/kiali/kiali:v1.73"
        imagePullPolicy: Always
        name: kiali
        command:
        - "/opt/kiali/kiali"
        - "-config"
        - "/kiali-configuration/config.yaml"
        env:
        - name: ACTIVE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_FORMAT
          value: "text"
        - name: LOG_TIME_FIELD_FORMAT
          value: "2006-01-02T15:04:05Z07:00"
        - name: LOG_SAMPLER_RATE
          value: "1"
        volumeMounts:
        - name: kiali-configuration
          mountPath: "/kiali-configuration"
        - name: kiali-cert
          mountPath: "/kiali-cert"
        - name: kiali-secret
          mountPath: "/kiali-secret"
        resources:
          requests:
            cpu: 10m
            memory: 64Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /kiali/healthz
            port: 20001
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /kiali/healthz
            port: 20001
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
      volumes:
      - name: kiali-configuration
        configMap:
          name: kiali
      - name: kiali-cert
        secret:
          secretName: istio.kiali-service-account
          optional: true
      - name: kiali-secret
        secret:
          secretName: kiali
          optional: true

---
apiVersion: v1
kind: Service
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
    version: v1.73
  annotations:
    kiali.io/api-spec: https://kiali.io/api
    kiali.io/api-type: rest
spec:
  type: ClusterIP
  ports:
  - name: http-kiali
    port: 20001
    protocol: TCP
    targetPort: 20001
  selector:
    app: kiali

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kiali-service-account
  namespace: istio-system
  labels:
    app: kiali
    version: v1.73

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kiali-viewer
  labels:
    app: kiali
    version: v1.73
rules:
- apiGroups: [""]
  resources:
  - configmaps
  - endpoints
  - pods/log
  verbs:
  - get
  - list
- apiGroups: [""]
  resources:
  - namespaces
  - pods
  - replicationcontrollers
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups: [""]
  resources:
  - pods/portforward
  verbs:
  - create
  - post
- apiGroups: ["extensions", "apps"]
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups: ["batch"]
  resources:
  - cronjobs
  - jobs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.istio.io
  - security.istio.io
  - extensions.istio.io
  - telemetry.istio.io
  - gateway.networking.k8s.io
  resources: ["*"]
  verbs:
  - get
  - list
  - watch
- apiGroups: ["apps.openshift.io"]
  resources:
  - deploymentconfigs
  verbs:
  - get
  - list
  - watch
- apiGroups: ["project.openshift.io"]
  resources:
  - projects
  verbs:
  - get
- apiGroups: ["route.openshift.io"]
  resources:
  - routes
  verbs:
  - get
- apiGroups: ["iter8.tools"]
  resources:
  - experiments
  verbs:
  - get
  - list
  - watch
- apiGroups: ["authentication.k8s.io"]
  resources:
  - tokenreviews
  verbs:
  - create

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kiali
  labels:
    app: kiali
    version: v1.73
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kiali-viewer
subjects:
- kind: ServiceAccount
  name: kiali-service-account
  namespace: istio-system

---
apiVersion: v1
kind: Secret
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
    version: v1.73
type: Opaque
data:
  username: YWRtaW4=  # admin
  passphrase: cGFzc3dvcmQ=  # password