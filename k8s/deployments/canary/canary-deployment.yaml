apiVersion: v1
kind: Namespace
metadata:
  name: zoptal-canary
  labels:
    name: zoptal-canary
    deployment-strategy: canary
---
# Canary Deployment Template
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${SERVICE_NAME}-canary
  namespace: zoptal-canary
  labels:
    app: ${SERVICE_NAME}
    version: ${VERSION}
    track: canary
    deployment-strategy: canary
spec:
  replicas: ${CANARY_REPLICAS}
  selector:
    matchLabels:
      app: ${SERVICE_NAME}
      track: canary
  template:
    metadata:
      labels:
        app: ${SERVICE_NAME}
        version: ${VERSION}
        track: canary
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "${SERVICE_PORT}"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: ${SERVICE_NAME}
        image: ${IMAGE_REGISTRY}/${SERVICE_NAME}:${VERSION}
        ports:
        - containerPort: ${SERVICE_PORT}
          name: http
        env:
        - name: DEPLOYMENT_TYPE
          value: "canary"
        - name: VERSION
          value: "${VERSION}"
        - name: NODE_ENV
          value: "production"
        - name: CANARY_DEPLOYMENT
          value: "true"
        resources:
          requests:
            memory: "${MEMORY_REQUEST}"
            cpu: "${CPU_REQUEST}"
          limits:
            memory: "${MEMORY_LIMIT}"
            cpu: "${CPU_LIMIT}"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: ${SERVICE_NAME}-config
---
# Stable Deployment (Current Production)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${SERVICE_NAME}-stable
  namespace: zoptal-production
  labels:
    app: ${SERVICE_NAME}
    version: ${STABLE_VERSION}
    track: stable
    deployment-strategy: canary
spec:
  replicas: ${STABLE_REPLICAS}
  selector:
    matchLabels:
      app: ${SERVICE_NAME}
      track: stable
  template:
    metadata:
      labels:
        app: ${SERVICE_NAME}
        version: ${STABLE_VERSION}
        track: stable
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "${SERVICE_PORT}"
    spec:
      containers:
      - name: ${SERVICE_NAME}
        image: ${IMAGE_REGISTRY}/${SERVICE_NAME}:${STABLE_VERSION}
        ports:
        - containerPort: ${SERVICE_PORT}
          name: http
        env:
        - name: DEPLOYMENT_TYPE
          value: "stable"
        - name: VERSION
          value: "${STABLE_VERSION}"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "${MEMORY_REQUEST}"
            cpu: "${CPU_REQUEST}"
          limits:
            memory: "${MEMORY_LIMIT}"
            cpu: "${CPU_LIMIT}"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: ${SERVICE_NAME}-config
---
# Virtual Service for Traffic Splitting (for Istio)
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: ${SERVICE_NAME}-canary-vs
  namespace: zoptal-production
spec:
  hosts:
  - ${SERVICE_NAME}
  http:
  - match:
    - headers:
        x-canary:
          exact: "true"
    route:
    - destination:
        host: ${SERVICE_NAME}
        subset: canary
      weight: 100
  - route:
    - destination:
        host: ${SERVICE_NAME}
        subset: stable
      weight: ${STABLE_WEIGHT}
    - destination:
        host: ${SERVICE_NAME}
        subset: canary
      weight: ${CANARY_WEIGHT}
---
# Destination Rule (for Istio)
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: ${SERVICE_NAME}-canary-dr
  namespace: zoptal-production
spec:
  host: ${SERVICE_NAME}
  subsets:
  - name: stable
    labels:
      track: stable
  - name: canary
    labels:
      track: canary
---
# Service for Canary (without Istio)
apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE_NAME}-canary
  namespace: zoptal-canary
  labels:
    app: ${SERVICE_NAME}
    track: canary
spec:
  selector:
    app: ${SERVICE_NAME}
    track: canary
  ports:
  - name: http
    port: ${SERVICE_PORT}
    targetPort: http
    protocol: TCP
  type: ClusterIP
---
# Main Service with Session Affinity
apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE_NAME}
  namespace: zoptal-production
  labels:
    app: ${SERVICE_NAME}
    deployment-strategy: canary
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    canary.deployment/enabled: "true"
    canary.deployment/weight: "${CANARY_WEIGHT}"
spec:
  selector:
    app: ${SERVICE_NAME}
  ports:
  - name: http
    port: ${SERVICE_PORT}
    targetPort: http
    protocol: TCP
  type: ClusterIP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800