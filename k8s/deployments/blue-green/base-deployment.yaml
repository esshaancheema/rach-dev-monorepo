apiVersion: v1
kind: Namespace
metadata:
  name: zoptal-blue
---
apiVersion: v1
kind: Namespace
metadata:
  name: zoptal-green
---
# Blue Environment Deployment Template
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${SERVICE_NAME}-blue
  namespace: zoptal-blue
  labels:
    app: ${SERVICE_NAME}
    version: ${VERSION}
    environment: blue
    deployment-strategy: blue-green
spec:
  replicas: ${REPLICAS}
  selector:
    matchLabels:
      app: ${SERVICE_NAME}
      environment: blue
  template:
    metadata:
      labels:
        app: ${SERVICE_NAME}
        version: ${VERSION}
        environment: blue
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "${SERVICE_PORT}"
    spec:
      containers:
      - name: ${SERVICE_NAME}
        image: ${IMAGE_REGISTRY}/${SERVICE_NAME}:${VERSION}
        ports:
        - containerPort: ${SERVICE_PORT}
          name: http
        env:
        - name: ENVIRONMENT
          value: "blue"
        - name: VERSION
          value: "${VERSION}"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "${MEMORY_REQUEST}"
            cpu: "${CPU_REQUEST}"
          limits:
            memory: "${MEMORY_LIMIT}"
            cpu: "${CPU_LIMIT}"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: ${SERVICE_NAME}-config
---
# Green Environment Deployment Template
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${SERVICE_NAME}-green
  namespace: zoptal-green
  labels:
    app: ${SERVICE_NAME}
    version: ${VERSION}
    environment: green
    deployment-strategy: blue-green
spec:
  replicas: ${REPLICAS}
  selector:
    matchLabels:
      app: ${SERVICE_NAME}
      environment: green
  template:
    metadata:
      labels:
        app: ${SERVICE_NAME}
        version: ${VERSION}
        environment: green
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "${SERVICE_PORT}"
    spec:
      containers:
      - name: ${SERVICE_NAME}
        image: ${IMAGE_REGISTRY}/${SERVICE_NAME}:${VERSION}
        ports:
        - containerPort: ${SERVICE_PORT}
          name: http
        env:
        - name: ENVIRONMENT
          value: "green"
        - name: VERSION
          value: "${VERSION}"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "${MEMORY_REQUEST}"
            cpu: "${CPU_REQUEST}"
          limits:
            memory: "${MEMORY_LIMIT}"
            cpu: "${CPU_LIMIT}"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: ${SERVICE_NAME}-config
---
# Blue Service
apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE_NAME}-blue
  namespace: zoptal-blue
  labels:
    app: ${SERVICE_NAME}
    environment: blue
spec:
  selector:
    app: ${SERVICE_NAME}
    environment: blue
  ports:
  - name: http
    port: ${SERVICE_PORT}
    targetPort: http
    protocol: TCP
  type: ClusterIP
---
# Green Service
apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE_NAME}-green
  namespace: zoptal-green
  labels:
    app: ${SERVICE_NAME}
    environment: green
spec:
  selector:
    app: ${SERVICE_NAME}
    environment: green
  ports:
  - name: http
    port: ${SERVICE_PORT}
    targetPort: http
    protocol: TCP
  type: ClusterIP
---
# Production Service (Points to Active Environment)
apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE_NAME}
  namespace: zoptal-production
  labels:
    app: ${SERVICE_NAME}
    deployment-strategy: blue-green
  annotations:
    active-environment: "${ACTIVE_ENVIRONMENT}"
spec:
  selector:
    app: ${SERVICE_NAME}
    environment: ${ACTIVE_ENVIRONMENT}
  ports:
  - name: http
    port: ${SERVICE_PORT}
    targetPort: http
    protocol: TCP
  type: ClusterIP