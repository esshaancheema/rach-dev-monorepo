name: Deploy Services

on:
  push:
    branches: [main]
    paths:
      - 'services/**'
      - '.github/workflows/deploy-services.yml'
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (leave empty for all)'
        required: false
        type: choice
        options:
          - ''
          - auth-service
          - project-service
          - ai-service
          - notification-service
          - analytics-service
          - payment-service
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  EKS_CLUSTER_NAME: zoptal-cluster

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.service }}" != "" ]; then
            echo "services=[\"${{ github.event.inputs.service }}\"]" >> $GITHUB_OUTPUT
          else
            SERVICES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^services/' | cut -d'/' -f2 | sort -u | jq -R . | jq -s -c .)
            if [ "$SERVICES" == "[]" ]; then
              echo "services=[\"auth-service\",\"project-service\",\"ai-service\",\"notification-service\",\"analytics-service\",\"payment-service\"]" >> $GITHUB_OUTPUT
            else
              echo "services=$SERVICES" >> $GITHUB_OUTPUT
            fi
          fi

  build-and-push:
    name: Build and Push ${{ matrix.service }}
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/zoptal/${{ matrix.service }}:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/zoptal/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ github.sha }}

  deploy:
    name: Deploy ${{ matrix.service }}
    needs: [detect-changes, build-and-push]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://${{ matrix.service }}.zoptal.com
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Deploy to EKS
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}
          helm upgrade --install ${{ matrix.service }} ./k8s/helm/services/${{ matrix.service }} \
            --namespace zoptal-$ENVIRONMENT \
            --create-namespace \
            --set image.repository=${{ env.ECR_REGISTRY }}/zoptal/${{ matrix.service }} \
            --set image.tag=${{ github.sha }} \
            --set environment=$ENVIRONMENT \
            --set replicaCount=3 \
            --set autoscaling.enabled=true \
            --set autoscaling.minReplicas=2 \
            --set autoscaling.maxReplicas=10 \
            --set resources.requests.memory="256Mi" \
            --set resources.requests.cpu="250m" \
            --set resources.limits.memory="512Mi" \
            --set resources.limits.cpu="500m" \
            --wait \
            --timeout 10m

      - name: Verify deployment
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}
          kubectl rollout status deployment/${{ matrix.service }} -n zoptal-$ENVIRONMENT --timeout=5m
          kubectl get pods -n zoptal-$ENVIRONMENT -l app=${{ matrix.service }}

      - name: Run smoke tests
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}
          SERVICE_URL=$(kubectl get svc ${{ matrix.service }} -n zoptal-$ENVIRONMENT -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Testing service at: https://$SERVICE_URL"
          
          # Basic health check
          curl -f -s -o /dev/null -w "%{http_code}" https://$SERVICE_URL/health || exit 1
          
          # Service-specific tests
          case "${{ matrix.service }}" in
            "auth-service")
              curl -f -s https://$SERVICE_URL/api/auth/status || exit 1
              ;;
            "project-service")
              curl -f -s https://$SERVICE_URL/api/projects/status || exit 1
              ;;
            "ai-service")
              curl -f -s https://$SERVICE_URL/api/ai/status || exit 1
              ;;
            *)
              echo "Basic health check passed"
              ;;
          esac

  rollback-on-failure:
    name: Rollback on Failure
    needs: deploy
    if: failure()
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Rollback deployments
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}
          for service in ${{ join(fromJson(needs.detect-changes.outputs.services), ' ') }}; do
            echo "Rolling back $service..."
            helm rollback $service -n zoptal-$ENVIRONMENT || true
          done

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "Deployment failed and rolled back",
              attachments: [{
                color: 'danger',
                text: 'Services deployment to ${{ github.event.inputs.environment || 'production' }} failed and was rolled back'
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}