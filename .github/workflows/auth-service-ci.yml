name: Auth Service CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'services/auth-service/**'
      - 'packages/database/**'
      - '.github/workflows/auth-service-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'services/auth-service/**'
      - 'packages/database/**'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: zoptal/auth-service

jobs:
  # Dependency and Security Analysis
  dependency-check:
    name: Dependency & Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd services/auth-service
          npm ci

      - name: Audit dependencies
        run: |
          cd services/auth-service
          npm audit --audit-level=high

      - name: Check for outdated packages
        run: |
          cd services/auth-service
          npm outdated || true

      - name: Security scan with Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=services/auth-service/package.json

  # Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd services/auth-service
          npm ci

      - name: Run ESLint
        run: |
          cd services/auth-service
          npm run lint

      - name: Run Prettier check
        run: |
          cd services/auth-service
          npm run format:check

      - name: TypeScript compilation check
        run: |
          cd services/auth-service
          npm run build

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: services/auth-service

  # Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_auth_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd services/auth-service
          npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_auth_db
        run: |
          cd packages/database
          npm ci
          npx prisma generate
          npx prisma db push

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_auth_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_testing_only
          REFRESH_JWT_SECRET: test_refresh_jwt_secret_key_for_testing_only
          ENCRYPTION_KEY: test_encryption_key_for_testing_32_chars
          NODE_ENV: test
        run: |
          cd services/auth-service
          npm run test

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_auth_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_testing_only
          REFRESH_JWT_SECRET: test_refresh_jwt_secret_key_for_testing_only
          ENCRYPTION_KEY: test_encryption_key_for_testing_32_chars
          NODE_ENV: test
        run: |
          cd services/auth-service
          npm run test:integration

      - name: Generate test coverage
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_auth_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_testing_only
          REFRESH_JWT_SECRET: test_refresh_jwt_secret_key_for_testing_only
          ENCRYPTION_KEY: test_encryption_key_for_testing_32_chars
          NODE_ENV: test
        run: |
          cd services/auth-service
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: services/auth-service/coverage
          fail_ci_if_error: true

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_auth_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd services/auth-service
          npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_auth_db
        run: |
          cd packages/database
          npm ci
          npx prisma generate
          npx prisma db push

      - name: Start auth service
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_auth_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_testing_only
          REFRESH_JWT_SECRET: test_refresh_jwt_secret_key_for_testing_only
          ENCRYPTION_KEY: test_encryption_key_for_testing_32_chars
          NODE_ENV: test
          PORT: 3001
        run: |
          cd services/auth-service
          npm run start &
          sleep 10

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          cd services/auth-service
          k6 run tests/performance/auth-performance.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: services/auth-service/performance-results.json

  # Build and Push Docker Image
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [dependency-check, code-quality, test]
    if: github.event_name == 'push'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.imageurl }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: services/auth-service/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Container security scan with Snyk
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://auth-staging.zoptal.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1

      - name: Deploy to ECS Staging
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster auth-staging-cluster \
            --service auth-service-staging \
            --force-new-deployment \
            --task-definition auth-service-staging:LATEST

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster auth-staging-cluster \
            --services auth-service-staging

      - name: Run smoke tests
        run: |
          cd services/auth-service
          npm run test:smoke -- --baseUrl=https://auth-staging.zoptal.com

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan, performance-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://auth.zoptal.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Deploy to ECS Production
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster auth-production-cluster \
            --service auth-service-production \
            --force-new-deployment \
            --task-definition auth-service-production:LATEST

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster auth-production-cluster \
            --services auth-service-production

      - name: Run smoke tests
        run: |
          cd services/auth-service
          npm run test:smoke -- --baseUrl=https://auth.zoptal.com

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: auth-service-v${{ github.run_number }}
          release_name: Auth Service Release v${{ github.run_number }}
          body: |
            **Changes in this release:**
            ${{ github.event.head_commit.message }}
            
            **Docker Image:** 
            `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}`
            
            **Deployed to:** Production
            **URL:** https://auth.zoptal.com
          draft: false
          prerelease: false

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()

    steps:
      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow