name: Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run npm audit
      run: |
        pnpm audit --audit-level moderate --json > audit-results.json || true
        pnpm audit --audit-level moderate

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json > snyk-results.json

    - name: Upload scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          audit-results.json
          trivy-results.sarif
          snyk-results.json
        retention-days: 30

  # Docker image vulnerability scanning
  container-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - auth-service
          - project-service
          - ai-service
          - billing-service
          - notification-service

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Build Docker image
      run: |
        docker build -t zoptal/${{ matrix.service }}:security-scan -f services/${{ matrix.service }}/Dockerfile .

    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: zoptal/${{ matrix.service }}:security-scan
        format: 'sarif'
        output: '${{ matrix.service }}-container-scan.sarif'

    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: '${{ matrix.service }}-container-scan.sarif'

    - name: Run Docker Scout (if available)
      run: |
        # Install Docker Scout
        curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
        
        # Run Docker Scout scan
        docker scout cves zoptal/${{ matrix.service }}:security-scan > ${{ matrix.service }}-scout-results.txt || true

    - name: Upload Docker Scout results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-scout-${{ matrix.service }}
        path: ${{ matrix.service }}-scout-results.txt
        retention-days: 7

  # Infrastructure security scanning
  infrastructure-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Run Checkov security scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: kubernetes,dockerfile,terraform
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

    - name: Scan Kubernetes manifests with kube-score
      run: |
        # Install kube-score
        wget https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64.tar.gz
        tar xzf kube-score_linux_amd64.tar.gz
        chmod +x kube-score
        
        # Scan Kubernetes manifests
        find k8s/ -name "*.yaml" -exec ./kube-score score {} \; > kube-score-results.txt || true

    - name: Upload kube-score results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kube-score-results
        path: kube-score-results.txt
        retention-days: 7

  # Static Application Security Testing (SAST)
  sast-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build applications
      run: pnpm run build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: Run ESLint security plugin
      run: |
        pnpm add -D eslint-plugin-security
        pnpm run lint:security || true

    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/typescript
          p/react

  # License compliance scanning
  license-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Install license checker
      run: pnpm add -g license-checker

    - name: Generate license report
      run: |
        license-checker --json > license-report.json
        license-checker --csv > license-report.csv

    - name: Check for prohibited licenses
      run: |
        # Check for GPL, AGPL, and other copyleft licenses
        prohibited_licenses=("GPL" "AGPL" "LGPL")
        
        for license in "${prohibited_licenses[@]}"; do
          if grep -i "$license" license-report.json; then
            echo "ERROR: Found prohibited license: $license"
            exit 1
          fi
        done
        
        echo "No prohibited licenses found"

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: |
          license-report.json
          license-report.csv
        retention-days: 30

  # Secret scanning
  secret-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Run TruffleHog secret scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitGuardian secret scan
      uses: GitGuardian/ggshield-action@v1
      env:
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      with:
        args: secret scan path .

  # OWASP ZAP dynamic security testing (if staging URL available)
  dast-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'https://staging.zoptal.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Run OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.4.0
      with:
        target: 'https://staging.zoptal.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # Security report generation
  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, infrastructure-scan, sast-scan, license-scan, secret-scan]
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate security report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Generated on $(date)" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Scan Results" >> security-report.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
        echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md
        echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-report.md
        echo "- License Scan: ${{ needs.license-scan.result }}" >> security-report.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
        
        echo "" >> security-report.md
        echo "## Artifacts" >> security-report.md
        echo "All scan results are available as workflow artifacts." >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 90

    - name: Post security status to Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        channel: '#security'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        custom_payload: |
          {
            attachments: [{
              color: '${{ job.status }}' === 'success' ? 'good' : 'danger',
              title: 'Security Scan Results',
              fields: [
                {
                  title: 'Repository',
                  value: '${{ github.repository }}',
                  short: true
                },
                {
                  title: 'Branch',
                  value: '${{ github.ref_name }}',
                  short: true
                },
                {
                  title: 'Dependency Scan',
                  value: '${{ needs.dependency-scan.result }}',
                  short: true
                },
                {
                  title: 'Container Scan',
                  value: '${{ needs.container-scan.result }}',
                  short: true
                },
                {
                  title: 'SAST Scan',
                  value: '${{ needs.sast-scan.result }}',
                  short: true
                },
                {
                  title: 'License Scan',
                  value: '${{ needs.license-scan.result }}',
                  short: true
                }
              ]
            }]
          }