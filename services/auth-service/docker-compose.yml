version: '3.8'

services:
  # Auth Service
  auth-service:
    build:
      context: ../../
      dockerfile: services/auth-service/Dockerfile
      target: development
    container_name: zoptal-auth-service
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/zoptal_auth_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_key_for_development_only
      - REFRESH_JWT_SECRET=your_refresh_jwt_secret_key_for_development_only
      - ENCRYPTION_KEY=your_32_character_encryption_key_dev
      - SENDGRID_API_KEY=your_sendgrid_api_key
      - TWILIO_ACCOUNT_SID=your_twilio_account_sid
      - TWILIO_AUTH_TOKEN=your_twilio_auth_token
      - TWILIO_PHONE_NUMBER=+1234567890
      - GOOGLE_CLIENT_ID=your_google_client_id
      - GOOGLE_CLIENT_SECRET=your_google_client_secret
      - GITHUB_CLIENT_ID=your_github_client_id
      - GITHUB_CLIENT_SECRET=your_github_client_secret
      - FRONTEND_URL=http://localhost:3001
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - SESSION_TIMEOUT_MINUTES=60
      - REFRESH_TOKEN_EXPIRY_DAYS=7
      - CORS_ORIGIN=http://localhost:3001,http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./:/app
      - ../../packages/database:/app/packages/database
      - /app/node_modules
    networks:
      - zoptal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: zoptal-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=zoptal_auth_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS="--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - zoptal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d zoptal_auth_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: zoptal-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - zoptal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # Adminer for Database Management (Development Only)
  adminer:
    image: adminer:4.8.1
    container_name: zoptal-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - zoptal-network
    restart: unless-stopped
    profiles:
      - dev-tools

  # Redis Commander for Redis Management (Development Only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: zoptal-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - zoptal-network
    restart: unless-stopped
    profiles:
      - dev-tools

  # Mailhog for Email Testing (Development Only)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: zoptal-mailhog
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - zoptal-network
    restart: unless-stopped
    profiles:
      - dev-tools

  # Nginx Load Balancer (for testing multiple instances)
  nginx:
    image: nginx:alpine
    container_name: zoptal-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth-service
    networks:
      - zoptal-network
    restart: unless-stopped
    profiles:
      - load-balancer

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: zoptal-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - zoptal-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: zoptal-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - zoptal-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  zoptal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16